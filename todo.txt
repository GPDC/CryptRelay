# Todo for v0_9_0 release:
- encryption
- sha hashes to make sure file copy & transfer is legit.



# Todo for v1_0_0 release:
-Fix chat output issue when someone sends you a message while you are typing

-improve display of file size so that it will show different size when appropriate. I.E. 357.22 MB, 1.21 GB

-prevent opening of CryptRelay.exe. Like if someone sends you a file CryptRelay.exe, you will try to
 open CryptRelay.exe and start trying to write to it if it actually opened it.

-provide options to overwrite files that already exist, or don't overwrite.

-ability to display a list of all files that encountered a problem and aborted during the session.

-prevent incompatible symbols from being used with files.

-localtime_r is erroring (linux) in displayTimeStarted(). // super low priority. Might even remove it.

-Sequence diagram.

-create a logging class. Have all classes take a constructor arg as a logging class. Make an interface for it too.

-Update state machine design so the control flow is better

-separate the upnp function that retrieves the external IP address into its own UPnP class method. It is stored in showInformation() atm.

-Progress indicator for file transfer. Maybe only display progress if the user typed something like: progress()



# Todo for v1_1_0 release:
-Make it easier to use with scripting, grep.

-Make it easier to transfer many files at once.

-Make an option to disable output to console during file transfer.
-To add to that, something should be made where the user can turn off output to console, but still get
 a summary of all items transferred at the end, and their individual success / fail status.

- Add startup option to delete all port forwards of a certain description. (maybe add this to miniupnp library, and pull request it?)



# Todo for v1_1_1
- Make all couts go through a mutex so that it doesn't end up garbled and mixed up in the console when multiple threads cout at same time.

- Add options to either as a startup argument, or as .cfg file, to change some settings in the program like: upnpDiscover()'s WAIT_TIME,
 which is the time in ms to wait for a response from a device.



# Research:
-(Encryption)I have serious concerns about the fact that messages contain predictable content. Could this be used to reduce brute
 force decryption time? I don't know much about this area, need research. Could add random amounts of junk data at the beginning and end.
 UPDATE: So i've started learning the super basics of crpytography, and this concern of my is described as KPA, Known Plaintext Attack.
 Best example of this attack would be: linear cryptanalysis against block ciphers.
 Would it be easy to find out what the private key is if user A sent a 1 character long message to user B?
 Having only 1 character would make it easier to do a KPA? Or does KPA need many characters to make
 it effective? By what % does a KPA reduce the time needed to decrypt generally?



# Think about possibly doing these:
-GetAdapterAddresses() on windows, getifaddrs() on linux, should be implemented so when the user
 decides to turn off upnp they won't have to type in their local ip addr.
-might want to get the username by (windows)getusername()  and linux  getlogin_r()

-In the FormatCheck.cpp, the port is already changed from string to a number. Change code everywhere
 to stop taking strings,and to stop changing strings to numbers for ports. Also minor change must be
 made in FormatCheck to return the port instead of bool.

-Wish the library had an implementation to delete port forwards based off of the description. Maybe I should make one.
 Should check list of all current port forwards and then basically grep out the ones that have
 description_of_port_forward_entry in it and take the external port and protocol attached to  that description and give it to UPNP_DeletePortMapping().

-say, if a bunch of files were transferred at once (if that is made so it is allowed), then keep a log
of all files that could not be transferred. And/or transfer all the files (maybe the problem was a file
name conflict), but change the name of the file to something like: FileNameConflict_1, and provide
an easy way to deal with all those files that got renamed.



# Critical Errors:



# Non-critical errors:



# Odd / noteable behavior:

-There was 1 time where person A's client thread errored, but reported success. It exited the client thread.
 However, the peer (person B) was now connected, acting as the server, to person A, who was acting as the client.

- Being forcibly connected to the router. To reproduce:
On your computer, start a crypt relay with a connection to a non existance ip address ex:
cryptrelay.exe -t 192.168.1.133 (let's call this 'A')
Now, in another command prompt window, start another cryptrelay.exe as:
cryptrelay.exe -t 192.168.1.1 (let's call this 'B')

Also works just the same with upnp disabled.

Both of these will report having a connection with the router, 192.168.1.1. That is rediculous.
In fact, A will be acting as the server during the connection with the router, and B as the client.
??? as if the router initiated the connection. But B initiated the connection with the router.
Why would the router randomly initiate a connection back?
However, I know that isn't necessarily true, A will not connect to anything unless i start up B.
And despite B trying to connect to the router, 192.168.1.1, it ends up somehow making a connection
THROUGH the router, to A. Which means A is not connected to B. The router is connected to A. B is
connected to the router.
However, it is not like the router is acting as a proxy and forwarding all the information from B to
A, because no information from B arrives at A. However, if i tell A to exit(), which will shutdown()
and close() the connection, then suddenly B realises that the connection has been shutdown(), even
though it is supposedly connected to the router -- not A.
	It is not possible to reproduce this behavior if i have A trying to listen
on a different port and connect to a different port than the ones B is trying to use.
Of course, you can only listen on 1 port at a time, so its not possible to share that port.
If i set B's target port to that of A's listening port, it still doesn't reproduce.
If i don't mess with any port settings, but start A up first, then B, they reproduce the effect.
If i start up B first, B will connect with the router, but then immediately recv() error, WSAError: 10054
which means connection forcibly closed by remote host.
Starting up B with port 80 doesn't change anything.




# Note-worthy side effects of actions:
-ctrl-c doesn't call deconstructors. Therefore it won't automatically delete the port forward that was automatically added at the beginning.

-Windows cmd prompt only accepts 4096 characters at a time. This doesn't affect file transfer or anything,
 but if you want to send a rediculously long chat message it can't be sent using the cmd prompt. Send
 it as a txt file instead, or break it up.
