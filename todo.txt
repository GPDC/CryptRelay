# Todo for v0_9_0 release:
- encryption
- sha hashes to make sure file copy & transfer is legit.



# Todo for v1_0_0 release:
-Fix chat output issue when someone sends you a message while you are typing

-improve display of file size so that it will show different size when appropriate. I.E. 357.22 MB, 1.21 GB

-prevent opening of CryptRelay.exe. Like if someone sends you a file CryptRelay.exe, you will try to
 open CryptRelay.exe and start trying to write to it if it actually opened it.

-provide options to overwrite files that already exist, or don't overwrite.

-ability to display a list of all files that encountered a problem and aborted during the session.

-prevent incompatible symbols from being used with files.

-localtime_r is erroring (linux). // super low priority. Might even remove it.

-Sequence diagram.

-create a logging class.

-Update state machine design so the control flow is better

-separate the upnp function that retrieves the external IP address into its own UPnP class method. It is stored in showInformation() atm.



# Research:
-(Encryption)I have serious concerns about the fact that messages contain predictable content. Could this be used to reduce brute
 force decryption time? I don't know much about this area, need research. Could add random amounts of junk data at the beginning and end.
 UPDATE: So i've started learning the super basics of crpytography, and this concern of my is described as KPA, Known Plaintext Attack.
 Best example of this attack would be: linear cryptanalysis against block ciphers.
 Would it be easy to find out what the private key is if user A sent a 1 character long message to user B?
 Having only 1 character would make it easier to do a KPA? Or does KPA need many characters to make
 it effective? By what % does a KPA reduce the time needed to decrypt generally?



# Think about possibly doing these:
-Make it easier for scripts to operate the program.

-GetAdapterAddresses() on windows, getifaddrs() on linux, should be implemented so when the user
 decides to turn off upnp they won't have to type in their local ip addr.
-might want to get the username by (windows)getusername()  and linux  getlogin_r()

-In the FormatCheck.cpp, the port is already changed from string to a number. Change code everywhere
 to stop taking strings,and to stop changing strings to numbers for ports. Also minor change must be
 made in FormatCheck to return the port instead of bool.

-implement a progress indicator for the file copy or file transfer. It would preferably be something
 like this due to using a terminal: in the getuserinput section that does getline(), check to see if
 the user typed out "progress()", and if the user did, then display the current progress of the file
 transfer, or file copy, whatever. This would be done by giving a displayProgress() function the
 args: total_bytes_sent, file_size.  It would just do a simple divide calculation and turn it into
 a % and display that. OR could just have getuserinput() set a global variable that
 be: display_progress = true; , and any function like copyFile() would check
 if(display_progress ==  true), then displayProgress(total_bytes_sent, file_size); and inside the 
 displayProgress() it would make sure to set display_progress = false; at the end.

-adding / fixing displayTimeStarted() in the UpnP class

-Wish the library had an implementation to delete port forwards based off of the description. Maybe I should make one.
 Should check list of all current port forwards and then basically grep out the ones that have
 description_of_port_forward_entry in it and take the external port and protocol attached to  that description and give it to UPNP_DeletePortMapping().



# Critical Errors:



# Non-critical errors:



# Odd / noteable behavior:

-There was 1 time where person A's client thread errored, but reported success. It exited the client thread.
 However, the peer (person B) was now connected, acting as the server, to person A, who is acting as the client.

# Note-worthy side effects of actions:
-ctrl-c doesn't call deconstructors. Therefore it won't automatically delete the port forward that was automatically added at the beginning.

-Windows cmd prompt only accepts 4096 characters at a time. This doesn't affect file transfer or anything,
 but if you want to send a rediculously long chat message it can't be sent using the cmd prompt. Send
 it as a txt file instead, or break it up.
